//
// Created by Rakesh on 2020-06-02.
//

#include "db/logger.h"
#include "model/configuration.h"
#include "server/service.h"
#include "../log/NanoLog.h"
#include "../common/util/clara.h"

#include <mongocxx/instance.hpp>

#include <iostream>

int main( int argc, char const * const * argv )
{
  using clara::Opt;

  auto& config = spt::model::Configuration::instance();
  bool console = false;
  bool async = true;
  int logBuffer{ 3 };
  std::string dir{"logs/"};
  bool help = false;
  auto ilp = spt::model::Configuration::ILPServer{};

  auto options = clara::Help(help) |
      Opt(config.port, "2000")["-p"]["--port"]("Port on which to listen (default 2000)") |
      Opt(config.threads, "8")["-n"]["--threads"]("Number of server threads to spawn (default system)") |
      Opt(config.mongoUri, "mongodb://localhost:27017")["-m"]["--mongo-uri"]("MongoDB connection uri.") |
      Opt(config.versionHistoryDatabase, "historyDatabase")["-d"]["--version-history-database"]("MongoDB database to maintain version history in (default versionHistory).") |
      Opt(config.versionHistoryCollection, "historyCollection")["-c"]["--version-history-collection"]("MongoDB collection to store versions of documents (default entities).") |
      Opt(config.metrics.database, "metricDatabase")["-s"]["--metric-database"]("MongoDB database to store metrics generated by service (default versionHistory).") |
      Opt(config.metrics.collection, "metricCollection")["-t"]["--metric-collection"]("MongoDB collection to store metrics generated by service (default metrics).") |
      Opt(config.metrics.batchSize, "metricBatchSize")["-w"]["--metric-batch-size"]("Number of metrics to accumulate before storing. (default 100).") |
      Opt(ilp.server, "ilpServer")["-i"]["--ilp-server"]("ILP Server hostname") |
      Opt(ilp.port, "ilpPort")["-x"]["--ilp-port"]("ILP Server port") |
      Opt(ilp.name, "ilpMeasurement")["-y"]["--ilp-series-name"]("ILP series/(table) name") |
      Opt(logBuffer, "3")["-b"]["--buffer"]("Buffer size for async logging (default 3)") |
      Opt(config.logLevel, "debug")["-l"]["--log-level"]("Log level to use [debug|info|warn|critical] (default info).") |
      Opt(logBuffer, "3")["-b"]["--buffer"]("Buffer size for async logging (default 3)") |
      Opt(console, "true")["-e"]["--console"]("Log to console (default false)") |
      Opt(async, "false")["-z"]["--log-async"]("Use async logging (default true)") |
      Opt(dir, "/tmp/")["-o"]["--dir"]("Log directory (default logs/)");

  auto result = options.parse(clara::Args(argc, argv));
  if (!result)
  {
    std::cerr << "Error in command line: " << result.errorMessage() << std::endl;
    exit(1);
  }

  if ( config.mongoUri.empty() )
  {
    std::cerr << "Mongo URI not configured." << std::endl;
    options.writeToStream( std::cout );
    exit(2);
  }

  if ( help )
  {
    options.writeToStream( std::cout );
    exit(0);
  }

  if ( !ilp.server.empty() && !ilp.port.empty() )
  {
    if ( ilp.name.empty() ) ilp.name = config.metrics.collection;
    config.ilp = std::move( ilp );
    std::cout << "ILP configured.  Storing metrics in TSDB.\n";
  }
  else std::cout << "ILP not configured.  Storing metrics in MongoDb.\n";

  std::cout << "Starting mongo service with options\n" <<
    "configuration: " << config.str() << '\n' <<
    "console: " << std::boolalpha << console << '\n' <<
    "async logging: " << std::boolalpha << async << '\n' <<
    "dir: " << dir << '\n';

  if ( config.logLevel == "debug" ) nanolog::set_log_level( nanolog::LogLevel::DEBUG );
  else if ( config.logLevel == "info" ) nanolog::set_log_level( nanolog::LogLevel::INFO );
  else if ( config.logLevel == "warn" ) nanolog::set_log_level( nanolog::LogLevel::WARN );
  else if ( config.logLevel == "critical" ) nanolog::set_log_level( nanolog::LogLevel::CRIT );
  if ( async )
  {
    nanolog::initialize(nanolog::NonGuaranteedLogger(logBuffer), dir, "mongo-service", console);
  }
  else
  {
    nanolog::initialize( nanolog::GuaranteedLogger(), dir, "mongo-service", console );
  }

  mongocxx::instance instance{ std::make_unique<spt::db::Logger>() };

  return spt::server::run();
}
